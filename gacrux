#!/usr/bin/env bash
# stuff
black="\e[38;5;8m"
red="\e[38;5;1m"
green="\e[38;5;2m"
yellow="\e[38;5;3m"
bold="\e[1m"
italic="\e[3m"
nc="\e[m"

trap 'printf "\e[2K\e[2C${green}${bold}Wise choice.\n" && exit' INT

ok() {
    pre_ok="$bold${black}[${green}OK${black}]${nc}: $italic"
    if [ $# -ge 2 ]; then
        pre_ok="$bold${black}[${green}${2}${black}]${nc}: $italic"
    fi
    echo -en $pre_ok"${1}${nc}"
}

err() {
    pre_err="$bold${black}[${red}ERR${black}]${nc}: $italic"
    if [ $# -ge 2 ]; then
        pre_err="$bold${black}[${red}${2}${black}]${nc}: $italic"
    fi
    echo -e $pre_err"${1}${nc}"
}

ask() {
    pre_ask="$bold${black}[${yellow}ASK${black}]${nc}: $italic"
    if [ $# -ge 2 ]; then
        pre_ask="$bold${black}[${yellow}${2}${black}]${nc}: $italic"
    fi
    echo -en $pre_ask"${1}${nc}"
}

if [ -z $1 ]; then
    echo -e "${red}${bold}DO NOT UTILIZE THIS WITHOUT READING THE SCRIPT!"$nc
    sleep 1
    echo -e "${red}${bold}I WILL NOT BE RESPONSIBLE IF THIS BREAKS STUFF!"$nc
    sleep 2
fi

echo -e "\e[2J\e[H"
echo -e "Welcome to\n"
sleep 1
echo -e "▞▀▖               ▞▀▖         ▗    "
echo -e "▌▄▖▝▀▖▛▚▀▖▛▚▀▖▝▀▖ ▌  ▙▀▖▌ ▌▞▀▖▄ ▞▀▘"
echo -e "▌ ▌▞▀▌▌▐ ▌▌▐ ▌▞▀▌ ▌ ▖▌  ▌ ▌▌ ▖▐ ▝▀▖"
echo -e "▝▀ ▝▀▘▘▝ ▘▘▝ ▘▝▀▘ ▝▀ ▘  ▝▀▘▝▀ ▀▘▀▀ "
sleep 1
echo -e "short: \"Gacrux\""

#live
loadkeys de-latin1
if [ -d /sys/firmware/efi/efivars ]; then
    ok "Detected.\n" "EFI"
else
    ok "Undetected.\n" "EFI"
fi
timedatectl set-ntp true
if ! ping -c3 archlinux.org -W3 &> /dev/null; then
    err "Failure.\n" "PING"
else
    ok "Success.\n" "PING"
fi
lsblk
ask "Enter Drive: " "!DRIVE"
read drive
ask "Do you wan't to use cfdisk or cgdisk for format?"
read part_make
if [[ $part_make,, = "cf"* ]]; then
    cfdisk "$drive"
elif [[ $part_make,, = "cg"* ]]; then
    cgdisk "$drive"
else
    ok "Defaulting to cgdisk."
    cgdisk $driver
fi
lsblk
ask "Enter ROOT Partition: "
read root_part
while [ -z $root_part ]; do
    err "$root_part doesn't exist\nUnfortunately, you can't install stuff on something inexistent."
    ask "Enter ROOT Partition: "
    read root_part
done
mkfs.btrfs -f -L "root_pool" $root_part
mount $root_part /mnt/
btrfs subvolume create /mnt/@
umount $root_part
mount -o rw,noatime,compress=zstd:3,subvol=/@ $root_part /mnt/
ask "Did you create a HOME partition? [y/n]" "HOME"
read home_part
mkdir -p /mnt/home
if [[ ${home_part,,} = "y"* ]]; then
    lsblk
    ask "Enter home Partition (exp: /dev/sda2): " "HOME"
    read home
    while ! blkid $home_part &> /dev/null; do
        err "$home_part does not exist" "HOME"
        lsblk
        ask "What is the name of your HOME Partition" "HOME"
        read home
    done
    mkfs.btrfs -f -L "home_pool" $home_part
    mount $home_part /mnt/home
    btrfs subvolume create /mnt/home/@home
    umount $home_part
    mount -o rw,noatime,compress=zstd:3,subvol=/@home $home_part /mnt/home
else
    umount $root_part
    mount $root_part /mnt/
    btrfs subvol create /mnt/@home
    umount $root_part
    mount -o rw,noatime,compress=zstd:3,subvol=/@ $root_part /mnt/
    mount -o rw,noatime,compress=zstd:3,subvol=/@home $root_part /mnt/home
fi

ask "Did you create an EFI partition? [y/n]" "EFI"
read efi
if [[ ${efi,,} = "y"* ]]; then
    lsblk
    ask "Enter EFI Partition (exp: /dev/sda1): " "EFI"
    read efi_part
    while ! blkid $efi_part &> /dev/null; do
        err "$efi_part does not exist" "EFI"
        lsblk
        ask "Enter EFI Partition (exp: /dev/sda1): " "EFI"
        read efi
    done
    mkfs.fat -F 32 "$efi_part"
    mkdir -p /mnt/boot
    mount "$efi_part" /mnt/boot
fi

ask "Did you create a SWAP partition? [y/n]" "SWAP"
read swap_part
if [[ ${swap_part,,} = "y"* ]]; then
    lsblk
    ask "Enter Swap Partition (exp: /dev/sda2): " "SWAP"
    read swap
    while ! blkid $swap &> /dev/null; do
        err "$swap does not exist" "SWAP"
        lsblk
        ask "What is the name of your SWAP Partition" "SWAP"
        read swap
    done
    mkswap $swap
    swapon $swap
fi

ok "Pacstrapping..." "PACSTRAP"
pacstrap /mnt/ base base-devel linux linux-firmware neovim dhcpcd networkmanager btrfs-progs zstd sed
ok "Generating Fstab..." "FSTAB"
genfstab -U /mnt >> /mnt/etc/fstab
ok "Please check if there are any errors in the fstab file." "FSTAB"
sleep 1
vim /mnt/etc/fstab
sleep 1
ok "Now chroot into /mnt" "CHROOT"
ok "And run gacrux2" "CHROOT"
sleep 1
sed "/^#live$/,/^#liveexit$/d" gacrux > /mnt/gacrux2
exit
#liveexit

#chroot
ask "Timezone: " "TZ"
read timezone
while [ ! -f /usr/share/zoneinfo/"$timezone" ]; do
    err "Incorrect timezone"
    ask "Timezone: " "TZ"
    read timezone
done
ln -sf "/usr/share/zoneinfo/$timezone" /etc/localtime
hwclock --systohc
ok "Uncomment locales." "LOCALE"
sleep 1
nvim /etc/locale.gen
sleep 2
locale-gen
ask "Enter LANG variable: " "LANG"
read lang
while [ -z "$lang" ] && cat /etc/locale.gen | grep "$lang"; do
    
    err "Can't be empty." "LANG"
    ask "Enter LANG variable: " "LANG"
    read lang
done
echo "LANG=$lang" > /etc/locale.conf
echo "KEYMAP=de-latin1" > /etc/vconsole.conf
ask "Enter hostname: " "HSTNM"
read hostname
while [ -z hostname ]; do
    err "Hostname empty"
    ask "Enter hostname: " "HSTNM"
    read hostname
done
echo "$hostname" > /etc/hostname
echo "127.0.0.1        localhost" >> /etc/hosts
echo "::1              localhost" >> /etc/hosts
echo "127.0.1.1        $hostname" >> /etc/hosts
ask "Enter CPU Type [intel/amd]: " "!UCODE"
read cpu_type
if [[ $cpu_type,, = "i"* ]]; then
    pacman -S intel-ucode
elif [[ $cpu_type,, = "a"* ]]; then
    pacman -S amd-ucode
else
    ok "Who needs Cpu's anyway!?" "(._.)"
fi
mkinitcpio -P
ask "Enter Root Password.\n"
passwd
ask "EFI (1) or MBR (2): " "GRUB"
read grub_type
if [ $grub_type = "2" ]; then
    pacman -S grub
    ask "Enter Grub Drive: (exp /dev/sda) " "!DRIVE"
    read drive
    while [ -z "$drive" ]; do 
        err "Drive can't be empty." "!DRIVE"
        ask "Enter Grub Drive: (exp /dev/sda) " "!DRIVE"
        read drive
    done
    grub-install --target=i386-pc "$drive"
elif [ $grub_type = "1" ]; then
    pacman -S grub efibootmgr
    ask "Enter Grub EFI partition Mount point: (exp: /boot) "
    read efi_mnt
    while [ -z "$efi_mnt" ] && [ ! -d "$efi_mnt" ]; do
        err "Inexistent."
        ask "Enter Grub EFI parition Mount point: (exp: /boot) "
        read efi_mnt
    done
    grub-install --target=x86_64-efi --efi-directory="$efi_mnt" --bootloader-id=GRUB
    if [ ! $? -eq 0 ]; then
        err "Something wen't wrong.\n" "GRUB"
        echo "The command that was used is: "
        echo "grub-install --target=x86_64-efi --efi-directory="$efi_mnt" --bootloader-id=GRUB"
    fi
else
    ok "Bootloader's are BLOAT.\n" "(._.)"
fi
ok "You can reboot now."
exit
#chrootexit
